{
  "openapi": "3.0.3",
  "info": {
    "title": "Swaps API",
    "description": "The Swaps API provides instant cross-chain swap and bridge functionality for decentralized applications.\nIt supports multiple virtual machines (EVM, Solana, Bitcoin) and various DEX protocols and bridge solutions.",
    "version": "3.0.0",
    "contact": {
      "name": "Swaps.xyz",
      "url": "https://swaps.xyz"
    }
  },
  "servers": [
    {
      "url": "https://api-v2.swaps.xyz/api",
      "description": "Production server"
    },
    {
      "url": "https://ghost.swaps.xyz/api/v2",
      "description": "Production server"
    }
  ],
  "paths": {
    "/getAction": {
      "get": {
        "summary": "Get Action",
        "servers": [
          {
            "url": "https://api-v2.swaps.xyz/api",
            "description": "Indexer API server"
          }
        ],
        "description": "Generates a transaction for cross-chain swaps, bridges, and calls. The action includes transaction data, routing information, and fee calculations for executing the requested operation.",
        "operationId": "getAction",
        "parameters": [
          {
            "name": "actionType",
            "in": "query",
            "required": true,
            "description": "Type of action to perform",
            "schema": {
              "$ref": "#/components/schemas/ActionType"
            }
          },
          {
            "name": "sender",
            "in": "query",
            "required": true,
            "description": "The address of the sender/user",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          {
            "name": "srcChainId",
            "in": "query",
            "required": true,
            "description": "Source chain ID",
            "schema": {
              "$ref": "#/components/schemas/ChainId"
            }
          },
          {
            "name": "srcToken",
            "in": "query",
            "required": true,
            "description": "Source token address",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          {
            "name": "dstChainId",
            "in": "query",
            "required": true,
            "description": "Destination chain ID",
            "schema": {
              "$ref": "#/components/schemas/ChainId"
            }
          },
          {
            "name": "dstToken",
            "in": "query",
            "required": true,
            "description": "Destination token address",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          {
            "name": "slippage",
            "in": "query",
            "required": true,
            "description": "Slippage tolerance in bps",
            "schema": {
              "type": "number",
              "format": "float",
              "minimum": 0,
              "maximum": 10000
            }
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "description": "The exact in or exact out amount of the swap\n\n\n`swap-action`",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]$"
            }
          },
          {
            "name": "swapDirection",
            "in": "query",
            "required": false,
            "description": "Swap direction for the action\n\n`swap-action`",
            "schema": {
              "$ref": "#/components/schemas/SwapDirection"
            }
          },
          {
            "name": "recipient",
            "in": "query",
            "required": false,
            "description": "Address to receive the swapped tokens\n\n`swap-action`",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "description": "The EVM address of the target contract (20 bytes hex)\n\n`evm-calldata-tx`",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          {
            "name": "data",
            "in": "query",
            "required": false,
            "description": "Calldata for the transaction\n\n`evm-calldata-tx`",
            "schema": {
              "$ref": "#/components/schemas/Hex"
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "description": "Value to send with transaction\n\n`evm-calldata-tx`",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]$"
            }
          },
          {
            "name": "erc20Amount",
            "in": "query",
            "required": false,
            "description": "The amount of Erc20 being transferred\n\n**Optional:** Use for calls requiring Erc20 transfers\n\n`evm-calldata-tx`",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]$"
            }
          },
          {
            "name": "Erc20Spender",
            "in": "query",
            "required": false,
            "description": "The Erc20 spender requiring approval for the transaction call\n\n**Optional:** Will default to the `to` address\n\n`evm-calldata-tx`",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          {
            "name": "bridgeIds",
            "in": "query",
            "required": false,
            "description": "Specific bridge protocols to use\n\n**Optional:** Will default to all available protocols",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BridgeId"
              }
            }
          },
          {
            "name": "refundTo",
            "in": "query",
            "required": false,
            "description": "Alternate address to receive refunds\n\n**Optional:** Will default to the `sender`",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with action data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/registerTxs": {
      "post": {
        "summary": "Register Transaction",
        "servers": [
          {
            "url": "https://api-v2.swaps.xyz/api",
            "description": "Indexer API server"
          }
        ],
        "description": "Register transactions for indexing. Mandatory for `alt-vm` transactions. Optional for any named VM.",
        "operationId": "registerTxs",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Single Transaction",
                    "$ref": "#/components/schemas/TxRegistrationEvent"
                  },
                  {
                    "title": "Multiple Transactions",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TxRegistrationEvent"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction registration results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_200__webhooks_registerTxsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/getStatus": {
      "get": {
        "summary": "Get Status",
        "servers": [
          {
            "url": "https://api-v2.swaps.xyz/api",
            "description": "Indexer API server"
          }
        ],
        "description": "Retrieve the status and details of a transaction by transaction hash or transaction ID",
        "operationId": "getTransactionStatus",
        "parameters": [
          {
            "name": "txHash",
            "in": "query",
            "description": "Transaction hash to query (required if txId not provided)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{64}$",
              "example": "0xd56968cf4fede6a0773f3e6dfad7d1088aacd3994bada55d44faee9596dadff2"
            }
          },
          {
            "name": "txId",
            "in": "query",
            "description": "Transaction ID to query (required if txHash not provided)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0x49b1d3d38176e45864fd55500c6c1879ab318609e1ed0c8eb9abd818e6c811fd"
            }
          },
          {
            "name": "chainId",
            "in": "query",
            "description": "Source chain ID for the transaction (optional but recommended)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxDetails"
                }
              }
            }
          }
        }
      }
    },
    "/getTransactions": {
      "get": {
        "summary": "Get Transactions",
        "servers": [
          {
            "url": "https://api-v2.swaps.xyz/api",
            "description": "Indexer API server"
          }
        ],
        "description": "Retrieve paginated transaction history with optional filtering",
        "operationId": "getTransactions",
        "parameters": [
          {
            "name": "appIds",
            "in": "query",
            "description": "Comma-separated list of your app IDs. By default, a request to this endpoint will return transactions across all appIds in your org. Each API key has a unique app ID.  Multiple app IDs can exist within a single org ID.",
            "schema": {
              "type": "string",
              "example": "0x5344e5a7,0x5314e6a7"
            }
          },
          {
            "name": "walletAddress",
            "in": "query",
            "description": "Wallet address to filter transactions by user",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
            }
          },
          {
            "name": "chainIds",
            "in": "query",
            "description": "Comma-separated list of chain IDs to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1,42161,10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page (max 500)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 25,
              "example": 25
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Time period filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["day", "week", "month", "allTime"],
              "default": "allTime",
              "example": "week"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date filter (Unix timestamp)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1640995200"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date filter (Unix timestamp)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1672531200"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction history response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TxDetails"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getPaths": {
      "get": {
        "summary": "Get Paths",
        "description": "Retrieve available token paths across chains with filtering options. Includes token info, supported swap directions, and optional amount limits for alt VM chains.",
        "operationId": "getPaths",
        "parameters": [
          {
            "name": "srcChainId",
            "in": "query",
            "required": true,
            "description": "Source chain ID",
            "schema": { "$ref": "#/components/schemas/ChainId" }
          },
          {
            "name": "srcToken",
            "in": "query",
            "required": true,
            "description": "Source token address",
            "schema": { "type": "string" }
          },
          {
            "name": "dstChainId",
            "in": "query",
            "required": false,
            "description": "Optional destination chain ID",
            "schema": { "$ref": "#/components/schemas/ChainId" }
          },
          {
            "name": "dstToken",
            "in": "query",
            "required": false,
            "description": "Optional destination token address",
            "schema": { "type": "string" }
          },
          {
            "name": "excludeBridgeIds",
            "in": "query",
            "required": false,
            "description": "Bridge IDs to exclude from routing",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/BridgeId" }
            }
          },
          {
            "name": "excludeDexIds",
            "in": "query",
            "required": false,
            "description": "DEX IDs to exclude from routing",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/DexId" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paths response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetPathsOutput" }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/getChainList": {
      "get": {
        "summary": "Get Chain List",
        "description": "Retrieve a list of supported chains, their names, and virtual machine identifiers. Raw data for the [supported chains list](/resources/chain-list)",
        "operationId": "getChainList",
        "responses": {
          "200": {
            "description": "List of supported chains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainListResponse"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionResponse": {
        "type": "object",
        "required": [
          "tx",
          "txId",
          "vmId",
          "amountIn",
          "amountInMax",
          "amountOutMin",
          "amountOut",
          "protocolFee",
          "applicationFee",
          "exchangeRate",
          "estimatedTxTime",
          "estimatedPriceImpact",
          "allRoutes"
        ],
        "properties": {
          "tx": {
            "oneOf": [
              {
                "title": "EVM Transaction",
                "$ref": "#/components/schemas/EvmTransaction"
              },
              {
                "title": "Solana Transaction",
                "$ref": "#/components/schemas/SerializedSolTransaction"
              },
              {
                "title": "Alt VM Transaction",
                "$ref": "#/components/schemas/AltVmTransaction"
              }
            ],
            "description": "Transaction data for execution"
          },
          "txId": {
            "$ref": "#/components/schemas/Hex",
            "description": "Transaction ID"
          },
          "vmId": {
            "type": "string",
            "enum": ["evm", "solana", "alt-vm"],
            "description": "Virtual machine identifier."
          },
          "amountIn": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount to input (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountInMax": {
            "$ref": "#/components/schemas/Payment",
            "description": "Maximum amount to input (inclusive of slippage)"
          },
          "amountOut": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount delivered to users (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountOutMin": {
            "$ref": "#/components/schemas/Payment",
            "description": "Minimum amount delivered to users (inclusive of slippage)"
          },
          "protocolFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Swaps.xyz fee"
          },
          "applicationFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Application fee (your fee!)"
          },
          "bridgeFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Bridge fee (from aggregated providers)"
          },
          "bridgeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeId"
            },
            "description": "Bridge IDs used in the route."
          },
          "bridgeRoute": {
            "$ref": "#/components/schemas/BridgeRoute",
            "description": "Bridge route information (src chain + token, dst chain + token, BridgeId)"
          },
          "exchangeRate": {
            "type": "number",
            "format": "float",
            "description": "Exchange rate for the swap."
          },
          "estimatedTxTime": {
            "type": "integer",
            "description": "Estimated transaction time in seconds."
          },
          "estimatedPriceImpact": {
            "type": "number",
            "format": "float",
            "description": "Estimated price impact percentage."
          },
          "allRoutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseActionResponse"
            },
            "description": "All available routes for the action."
          }
        }
      },
      "BaseActionResponse": {
        "type": "object",
        "required": [
          "tx",
          "txId",
          "amountIn",
          "vmId",
          "amountInMax",
          "amountOutMin",
          "amountOut",
          "protocolFee",
          "applicationFee",
          "exchangeRate",
          "estimatedTxTime",
          "estimatedPriceImpact"
        ],
        "properties": {
          "tx": {
            "oneOf": [
              {
                "title": "EVM Transaction",
                "$ref": "#/components/schemas/EvmTransaction"
              },
              {
                "title": "Solana Transaction",
                "$ref": "#/components/schemas/SerializedSolTransaction"
              },
              {
                "title": "Alt VM Transaction",
                "$ref": "#/components/schemas/AltVmTransaction"
              }
            ],
            "description": "Transaction data for execution"
          },
          "txId": {
            "$ref": "#/components/schemas/Hex",
            "description": "Transaction ID"
          },
          "vmId": {
            "type": "string",
            "enum": ["evm", "solana", "alt-vm"],
            "description": "Virtual machine identifier."
          },
          "amountIn": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount to input (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountInMax": {
            "$ref": "#/components/schemas/Payment",
            "description": "Maximum amount to input (inclusive of slippage)"
          },
          "amountOut": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount delivered to users (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountOutMin": {
            "$ref": "#/components/schemas/Payment",
            "description": "Minimum amount delivered to users (inclusive of slippage)"
          },
          "protocolFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Swaps.xyz fee"
          },
          "applicationFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Application fee (your fee!)"
          },
          "bridgeFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Bridge fee (from aggregated providers)"
          },
          "bridgeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeId"
            },
            "description": "Bridge IDs used in the route."
          },
          "bridgeRoute": {
            "$ref": "#/components/schemas/BridgeRoute",
            "description": "Bridge route information (src chain + token, dst chain + token, BridgeId)"
          },
          "exchangeRate": {
            "type": "number",
            "format": "float",
            "description": "Exchange rate for the swap."
          },
          "estimatedTxTime": {
            "type": "integer",
            "description": "Estimated transaction time in seconds."
          },
          "estimatedPriceImpact": {
            "type": "number",
            "format": "float",
            "description": "Estimated price impact percentage."
          }
        }
      },
      "ChainId": {
        "type": "number",
        "description": "Chain ID. Find in the list of supported networks"
      },
      "VmId": {
        "type": "string",
        "enum": ["evm", "solana", "alt-vm"],
        "description": "Virtual machine identifier."
      },
      "BridgeId": {
        "type": "string",
        "enum": [
          "optimism",
          "arbitrum",
          "oft",
          "yield-oft",
          "hyperlane",
          "ghost",
          "mayan",
          "across",
          "relay"
        ],
        "description": "Bridge protocol identifier."
      },
      "ActionType": {
        "type": "string",
        "enum": ["swap-action", "evm-calldata-tx"],
        "description": "Type of action to perform."
      },
      "SwapDirection": {
        "type": "string",
        "enum": ["exact-amount-in", "exact-amount-out"],
        "description": "Swap direction for the action."
      },
      "EvmTransaction": {
        "type": "object",
        "required": ["to", "data", "value"],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/EvmAddress"
          },
          "data": {
            "$ref": "#/components/schemas/Hex"
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Value in wei as string with 'n' suffix (bigint serialized)"
          },
          "gasPrice": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Gas price in wei as string with 'n' suffix (bigint serialized)"
          },
          "gasLimit": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Gas limit as string with 'n' suffix (bigint serialized)"
          },
          "maxFeePerGas": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Max fee per gas as string with 'n' suffix (bigint serialized)"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Max priority fee per gas as string with 'n' suffix (bigint serialized)"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          }
        }
      },
      "SerializedSolTransaction": {
        "type": "object",
        "required": ["base64Tx", "recentBlockhash", "payer"],
        "properties": {
          "base64Tx": {
            "type": "string",
            "description": "Base64-encoded transaction"
          },
          "recentBlockhash": {
            "type": "string",
            "description": "Recent blockhash for transaction validity"
          },
          "payer": {
            "$ref": "#/components/schemas/SolanaAddress",
            "description": "PublicKey who pays fees"
          }
        }
      },
      "AltVmTransaction": {
        "type": "object",
        "required": ["to", "value", "chainId", "chainKey"],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ExchangeAddress",
            "description": "Exchange address"
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Value as string with 'n' suffix (bigint serialized)"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "chainKey": {
            "type": "string",
            "description": "Chain key identifier"
          }
        }
      },
      "Payment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenInfo"
          },
          {
            "type": "object",
            "required": ["amount"],
            "properties": {
              "amount": {
                "type": "string",
                "pattern": "^[0-9]+n$",
                "description": "Amount as string with 'n' suffix (bigint serialized)"
              }
            }
          }
        ]
      },
      "ExchangeAddress": {
        "type": "string",
        "description": "Exchange address format"
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Token address"
          },
          "decimals": {
            "type": "integer",
            "description": "Token decimals"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol"
          },
          "name": {
            "type": "string",
            "description": "Token name"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId",
            "description": "Chain ID for the token"
          }
        }
      },
      "BridgeStep": {
        "type": "object",
        "required": [
          "srcChainId",
          "dstChainId",
          "srcBridgeToken",
          "dstBridgeToken",
          "bridgeId"
        ],
        "properties": {
          "srcChainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "dstChainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "srcBridgeToken": {
            "$ref": "#/components/schemas/Address"
          },
          "dstBridgeToken": {
            "$ref": "#/components/schemas/Address"
          },
          "bridgeId": {
            "$ref": "#/components/schemas/BridgeId"
          }
        }
      },
      "BridgeRoute": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BridgeStep"
        },
        "description": "Array of bridge steps"
      },
      "Address": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{40}$",
        "description": "EVM address (20 bytes hex)"
      },
      "EvmAddress": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{40}$",
        "description": "EVM address (20 bytes hex)"
      },
      "SolanaAddress": {
        "type": "string",
        "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
        "description": "Solana public key (base58 encoded)"
      },
      "Hex": {
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]*$",
        "description": "Hex string with 0x prefix"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          }
        }
      },
      "ChainListResponse": {
        "type": "object",
        "properties": {
          "chainId": { "$ref": "#/components/schemas/ChainId" },
          "name": {
            "type": "string",
            "description": "Human-readable chain name"
          },
          "vmId": { "$ref": "#/components/schemas/VmId" }
        },
        "required": ["chainId", "name", "vmId"]
      },
      "DexId": {
        "type": "string",
        "description": "DEX identifier (depends on integration)"
      },
      "TokenInfoWithAmounts": {
        "allOf": [
          { "$ref": "#/components/schemas/TokenInfo" },
          {
            "type": "object",
            "properties": {
              "minAmount": {
                "type": "string",
                "description": "Minimum amount (Alt VM only)"
              },
              "maxAmount": {
                "type": "string",
                "description": "Maximum amount (Alt VM only)"
              }
            }
          }
        ]
      },
      "AmountLimits": {
        "type": "object",
        "properties": {
          "minAmount": {
            "type": "string",
            "description": "Minimum amount of source token required for swap to destination token \n `null` indicates no minumum"
          },
          "maxAmount": {
            "type": "string",
            "description": "Maximum amount of source token that can be swapped to destination token \n `null` indicates no maximum"
          }
        },
        "required": ["minAmount", "maxAmount"]
      },
      "ChainPath": {
        "type": "object",
        "properties": {
          "chainId": { "$ref": "#/components/schemas/ChainId" },
          "tokens": {
            "description": "Available destination tokens for given source token \n `all` indicates all tokens on destination chain are eligible",
            "oneOf": [
              { "title": "Named VM", "type": "string", "enum": ["all"] },
              {
                "title": "Alt VM",
                "type": "array",
                "items": { "$ref": "#/components/schemas/TokenInfoWithAmounts" }
              }
            ]
          },
          "supportsExactAmountIn": { "type": "boolean" },
          "supportsExactAmountOut": { "type": "boolean" },
          "amountLimits": { "$ref": "#/components/schemas/AmountLimits" }
        },
        "required": [
          "chainId",
          "tokens",
          "supportsExactAmountIn",
          "supportsExactAmountOut"
        ]
      },
      "GetPathsOutput": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChainPath" }
          },
          "timestamp": {
            "type": "string",
            "description": "Response timestamp (ISO string) for cache validation"
          }
        },
        "required": ["paths", "timestamp"]
      },
      "TxRegistrationEvent": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Transaction hash",
            "example": "0x62d0e13123852791446c6f923c2d0b9247bda10f1eb5eb48ff5b4bc42d22ab42"
          },
          "chainId": {
            "type": "integer",
            "description": "Chain ID where the transaction occurred",
            "example": 42161
          }
        },
        "required": ["txHash", "chainId"]
      },
      "ValidatedTxId": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the transaction registration was successful",
            "example": true
          },
          "error": {
            "type": "string",
            "description": "Error message if registration failed",
            "example": null
          }
        },
        "required": ["success"]
      },
      "TxStatus": {
        "type": "object",
        "properties": {
          "statusMessage": {
            "type": "string",
            "enum": ["success", "pending", "refunded", "failed"],
            "description": "Status of the transaction",
            "example": "success"
          },
          "sender": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "Sender wallet address",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "srcChainId": {
            "type": "integer",
            "description": "Source chain ID",
            "example": 1
          },
          "dstChainId": {
            "type": "integer",
            "description": "Destination chain ID",
            "example": 42161
          },
          "srcTxHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Source transaction hash",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "dstTxHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Destination transaction hash",
            "example": "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
          },
          "bridgeDetails": {
            "$ref": "#/components/schemas/BridgeDetails"
          },
          "txId": {
            "type": "string",
            "description": "Unique transaction identifier",
            "example": "0x49b1d3d38176e45864fd55500c6c1879ab318609e1ed0c8eb9abd818e6c811fd"
          }
        }
      },
      "TxDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TxStatus"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Org"
                  }
                ]
              },
              "usdValue": {
                "type": "number",
                "nullable": true,
                "description": "USD value of the transaction",
                "example": 100.5
              },
              "srcTx": {
                "$ref": "#/components/schemas/OnchainTx"
              },
              "dstTx": {
                "$ref": "#/components/schemas/OnchainTx"
              }
            }
          }
        ]
      },
      "BridgeDetails": {
        "type": "object",
        "properties": {
          "isBridge": {
            "type": "boolean",
            "description": "Whether this transaction involves bridging",
            "example": true
          },
          "bridgeTime": {
            "type": "number",
            "nullable": true,
            "description": "Bridge time in seconds (null if not a bridge)",
            "example": 420
          },
          "txPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxNode"
            },
            "description": "Transaction path through different chains"
          }
        },
        "required": ["isBridge", "bridgeTime", "txPath"]
      },
      "TxNode": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "integer",
            "description": "Chain ID for this step",
            "example": 1
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Transaction hash for this step",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp as bigint string",
            "example": "1640995200000000000"
          },
          "nextBridge": {
            "type": "string",
            "description": "Bridge type for the next hop",
            "example": "layerZero"
          }
        }
      },
      "OnchainTx": {
        "type": "object",
        "properties": {
          "toAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Recipient address",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Transaction hash",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "chainId": {
            "type": "integer",
            "description": "Chain ID",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "Transaction value as bigint string",
            "example": "1000000000000000000n"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp as bigint string",
            "example": "1640995200000000000"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Token name",
            "example": "Ethereum"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol",
            "example": "ETH"
          },
          "decimals": {
            "type": "integer",
            "description": "Token decimals",
            "example": 18
          },
          "amount": {
            "type": "string",
            "description": "Token amount as bigint string",
            "example": "1000000000000000000n"
          },
          "address": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "Token contract address",
            "example": "0x1234567890123456789012345678901234567890"
          }
        },
        "required": ["name", "symbol", "decimals", "amount", "address"]
      },
      "Org": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "nullable": true,
            "description": "Application ID",
            "example": "app_123"
          },
          "affiliateId": {
            "type": "string",
            "description": "Affiliate ID",
            "example": "affiliate_123"
          },
          "appFees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "description": "Fee recipient address"
                },
                "token": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "description": "Fee token address"
                },
                "amount": {
                  "type": "string",
                  "description": "Fee amount"
                }
              },
              "required": ["recipient", "token", "amount"]
            }
          }
        },
        "required": ["appId", "affiliateId", "appFees"]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "Results per page",
            "example": 25
          },
          "total": {
            "type": "integer",
            "description": "Total number of results",
            "example": 150
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "example": 6
          }
        },
        "required": ["page", "limit", "total", "totalPages"]
      },
      "get_400__api_getStatusSchema": {
        "$ref": "#/components/schemas/ErrorResponse"
      },
      "post_200__webhooks_registerTxsSchema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ValidatedTxId"
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "Limited demo key for API Playground: `5c951bc81da566bbd030ba8e20724063`."
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
