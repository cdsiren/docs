{
  "openapi": "3.0.3",
  "info": {
    "title": "Swaps API",
    "description": "The Swaps API provides instant cross-chain swap and bridge functionality for decentralized applications.\nIt supports multiple virtual machines (EVM, Solana, Bitcoin) and various DEX protocols and bridge solutions.",
    "version": "3.0.0",
    "contact": {
      "name": "Swaps.xyz",
      "url": "https://swaps.xyz"
    }
  },
  "servers": [
    {
      "url": "https://api-v2.swaps.xyz/api",
      "description": "Production server"
    },
    {
      "url": "https://api.decentscan.xyz/api/v2",
      "description": "Production server"
    }
  ],
  "paths": {
    "/getAction": {
      "get": {
        "summary": "Get Action",
        "servers": [
          {
            "url": "https://api-v2.swaps.xyz/api",
            "description": "Indexer API server"
          }
        ],
        "description": "Generates a transaction for cross-chain swaps, bridges, and calls. The action includes transaction data, routing information, and fee calculations for executing the requested operation.",
        "operationId": "getAction",
        "parameters": [
          {
            "name": "arguments",
            "in": "query",
            "required": true,
            "description": "JSON object containing all request parameters. Rendered below as individual fields and serialized to a string.",
            "schema": {
              "$ref": "#/components/schemas/ActionRequest"
            },
            "x-display-as": "individual-fields",
            "x-serialization": {
              "format": "json-string",
              "coerceTypes": true
            },
            "example": "{\"sender\":\"0xAcCC1fe6537eb8EB56b31CcFC48Eb9363e8dd32E\",\"srcChainId\":8453,\"dstChainId\":42161,\"srcToken\":\"0x0000000000000000000000000000000000000000\",\"dstToken\":\"0x0000000000000000000000000000000000000000\",\"slippage\":1,\"actionType\":\"swap-action\",\"actionConfig\":{\"swapDirection\":\"exact-amount-in\",\"receiverAddress\":\"0xAcCC1fe6537eb8EB56b31CcFC48Eb9363e8dd32E\",\"amount\":\"1000000000000000000n\"}}"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with action data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getStatus": {
      "get": {
        "summary": "Get Status",
        "servers": [
          {
            "url": "https://api.decentscan.xyz/api/v2",
            "description": "Indexer API server"
          }
        ],
        "description": "Retrieve the status and details of a transaction by transaction hash or transaction ID",
        "operationId": "getTransactionStatus",
        "parameters": [
          {
            "name": "txHash",
            "in": "query",
            "description": "Transaction hash to query (required if txId not provided)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{64}$",
              "example": "0x07af4dfe9d0a6ee02bfa9d4885ab741c5d492f351bd76df9f31e99f91634ca8c"
            }
          },
          {
            "name": "txId",
            "in": "query",
            "description": "Transaction ID to query (required if txHash not provided)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0x49b1d3d38176e45864fd55500c6c1879ab318609e1ed0c8eb9abd818e6c811fd"
            }
          },
          {
            "name": "chainId",
            "in": "query",
            "description": "Source chain ID for the transaction (optional but recommended)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxDetails"
                }
              }
            }
          }
        }
      }
    },
    "/getTransactions": {
      "get": {
        "summary": "Get Transactions",
        "servers": [
          {
            "url": "https://api.decentscan.xyz/api/v2",
            "description": "Indexer API server"
          }
        ],
        "description": "Retrieve paginated transaction history with optional filtering",
        "operationId": "getTransactions",
        "parameters": [
          {
            "name": "appIds",
            "in": "query",
            "description": "Comma-separated list of your app IDs.  Each API key has a unique app ID.  Multiple app IDs can exist within a single org ID.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x5344e5a7,0x5314e6a7"
            }
          },
          {
            "name": "walletAddress",
            "in": "query",
            "description": "Wallet address to filter transactions by user",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
            }
          },
          {
            "name": "chainIds",
            "in": "query",
            "description": "Comma-separated list of chain IDs to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1,42161,10"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page (max 500)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 25,
              "example": 25
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Time period filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "allTime"
              ],
              "default": "allTime",
              "example": "week"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date filter (Unix timestamp)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1640995200"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date filter (Unix timestamp)",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1672531200"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction history response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "txs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TxStatus"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "txs",
                    "pagination"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/registerTxs": {
      "post": {
        "summary": "Register Transaction",
        "servers": [
          {
            "url": "https://api.decentscan.xyz/api/v2/webhooks",
            "description": "Indexer API server"
          }
        ],
        "description": "Register transactions for indexing. Mandatory for `altVM` transactions. Optional for any named VM.",
        "operationId": "registerTxs",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Single Transaction",
                    "$ref": "#/components/schemas/TxRegistrationEvent"
                  },
                  {
                    "title": "Multiple Transactions",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TxRegistrationEvent"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction registration results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_200__webhooks_registerTxsSchema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionRequest": {
        "type": "object",
        "required": [
          "sender",
          "srcChainId",
          "dstChainId",
          "srcToken",
          "dstToken",
          "slippage",
          "actionType",
          "actionConfig"
        ],
        "properties": {
          "actionType": {
            "$ref": "#/components/schemas/ActionType",
            "description": "Type of action to perform"
          },
          "sender": {
            "$ref": "#/components/schemas/Address",
            "description": "The address of the sender/user"
          },
          "srcChainId": {
            "$ref": "#/components/schemas/ChainId",
            "description": "Source chain ID"
          },
          "srcToken": {
            "$ref": "#/components/schemas/Address",
            "description": "Source token address"
          },
          "dstChainId": {
            "$ref": "#/components/schemas/ChainId",
            "description": "Destination chain ID"
          },
          "dstToken": {
            "$ref": "#/components/schemas/Address",
            "description": "Destination token address"
          },
          "bridgeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeId"
            },
            "description": "Specific bridge protocols to use"
          },
          "slippage": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "description": "Slippage tolerance in percentage"
          },
          "actionConfig": {
            "oneOf": [
              {
                "title": "Swap",
                "$ref": "#/components/schemas/SwapActionConfig"
              },
              {
                "title": "Calldata",
                "$ref": "#/components/schemas/EvmCalldataTxConfig"
              },
              {
                "title": "EVM Function",
                "$ref": "#/components/schemas/EvmFunctionConfig"
              }
            ],
            "description": "Configuration for the action",
            "discriminator": {
              "propertyName": "actionType",
              "mapping": {
                "swap-action": "#/components/schemas/SwapActionConfig",
                "evm-function": "#/components/schemas/EvmFunctionConfig",
                "evm-calldata-tx": "#/components/schemas/EvmCalldataTxConfig"
              }
            }
          },
          "refundTo": {
            "$ref": "#/components/schemas/Address",
            "description": "Alternate address to receive refunds. Will default to the `sender`"
          }
        }
      },
      "ActionResponse": {
        "type": "object",
        "required": [
          "tx",
          "txId",
          "amountIn",
          "amountInMax",
          "amountOutMin",
          "amountOut",
          "protocolFee",
          "applicationFee",
          "exchangeRate",
          "estimatedTxTime",
          "estimatedPriceImpact",
          "allRoutes"
        ],
        "properties": {
          "tx": {
            "oneOf": [
              {
                "title": "EVM Transaction",
                "$ref": "#/components/schemas/EvmTransaction"
              },
              {
                "title": "Solana Transaction",
                "$ref": "#/components/schemas/SerializedSolTransaction"
              },
              {
                "title": "Alt VM Transaction",
                "$ref": "#/components/schemas/AltVmTransaction"
              }
            ],
            "description": "Transaction data for execution"
          },
          "txId": {
            "$ref": "#/components/schemas/Hex",
            "description": "Transaction ID"
          },
          "amountIn": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount to input (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountInMax": {
            "$ref": "#/components/schemas/Payment",
            "description": "Maximum amount to input (inclusive of slippage)"
          },
          "amountOut": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount delivered to users (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountOutMin": {
            "$ref": "#/components/schemas/Payment",
            "description": "Minimum amount delivered to users (inclusive of slippage)"
          },
          "protocolFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Swaps.xyz fee"
          },
          "applicationFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Application fee (your fee!)"
          },
          "bridgeFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Bridge fee (from aggregated providers)"
          },
          "bridgeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeId"
            },
            "description": "Bridge IDs used in the route."
          },
          "bridgeRoute": {
            "$ref": "#/components/schemas/BridgeRoute",
            "description": "Bridge route information (src chain + token, dst chain + token, BridgeId)"
          },
          "exchangeRate": {
            "type": "number",
            "format": "float",
            "description": "Exchange rate for the swap."
          },
          "estimatedTxTime": {
            "type": "integer",
            "description": "Estimated transaction time in seconds."
          },
          "estimatedPriceImpact": {
            "type": "number",
            "format": "float",
            "description": "Estimated price impact percentage."
          },
          "allRoutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseActionResponse"
            },
            "description": "All available routes for the action."
          }
        }
      },
      "BaseActionResponse": {
        "type": "object",
        "required": [
          "tx",
          "txId",
          "amountIn",
          "amountInMax",
          "amountOutMin",
          "amountOut",
          "protocolFee",
          "applicationFee",
          "exchangeRate",
          "estimatedTxTime",
          "estimatedPriceImpact"
        ],
        "properties": {
          "tx": {
            "oneOf": [
              {
                "title": "EVM Transaction",
                "$ref": "#/components/schemas/EvmTransaction"
              },
              {
                "title": "Solana Transaction",
                "$ref": "#/components/schemas/SerializedSolTransaction"
              },
              {
                "title": "Alt VM Transaction",
                "$ref": "#/components/schemas/AltVmTransaction"
              }
            ],
            "description": "Transaction data for execution"
          },
          "txId": {
            "$ref": "#/components/schemas/Hex",
            "description": "Transaction ID"
          },
          "amountIn": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount to input (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountInMax": {
            "$ref": "#/components/schemas/Payment",
            "description": "Maximum amount to input (inclusive of slippage)"
          },
          "amountOut": {
            "$ref": "#/components/schemas/Payment",
            "description": "Expected amount delivered to users (exclusive of slippage - recommended value to display in frontend)"
          },
          "amountOutMin": {
            "$ref": "#/components/schemas/Payment",
            "description": "Minimum amount delivered to users (inclusive of slippage)"
          },
          "protocolFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Swaps.xyz fee"
          },
          "applicationFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Application fee (your fee!)"
          },
          "bridgeFee": {
            "$ref": "#/components/schemas/Payment",
            "description": "Bridge fee (from aggregated providers)"
          },
          "bridgeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BridgeId"
            },
            "description": "Bridge IDs used in the route."
          },
          "bridgeRoute": {
            "$ref": "#/components/schemas/BridgeRoute",
            "description": "Bridge route information (src chain + token, dst chain + token, BridgeId)"
          },
          "exchangeRate": {
            "type": "number",
            "format": "float",
            "description": "Exchange rate for the swap."
          },
          "estimatedTxTime": {
            "type": "integer",
            "description": "Estimated transaction time in seconds."
          },
          "estimatedPriceImpact": {
            "type": "number",
            "format": "float",
            "description": "Estimated price impact percentage."
          }
        }
      },
      "ChainId": {
        "type": "number",
        "description": "Chain ID. Find in the list of supported networks"
      },
      "VmId": {
        "type": "string",
        "enum": [
          "evm",
          "solana",
          "alt-vm"
        ],
        "description": "Virtual machine identifier."
      },
      "BridgeId": {
        "type": "string",
        "enum": [
          "optimism",
          "arbitrum",
          "oft",
          "yield-oft",
          "hyperlane",
          "ghost",
          "mayan",
          "across",
          "relay"
        ],
        "description": "Bridge protocol identifier."
      },
      "ActionType": {
        "type": "string",
        "enum": [
          "swap-action",
          "evm-calldata-tx",
          "evm-function"
        ],
        "description": "Type of action to perform."
      },
      "SwapDirection": {
        "type": "string",
        "enum": [
          "exact-amount-in",
          "exact-amount-out"
        ],
        "description": "Swap direction for the action."
      },
      "ActionPayment": {
        "type": "object",
        "required": [
          "amount",
          "address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Amount as string with 'n' suffix (bigint serialized)"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Token address for the payment"
          }
        }
      },
      "SwapActionConfig": {
        "type": "object",
        "required": [
          "swapDirection",
          "amount"
        ],
        "properties": {
          "swapDirection": {
            "$ref": "#/components/schemas/SwapDirection"
          },
          "amount": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Enter amount as bigint. Will be serialized to string in API requst (e.g., 100000000000000000n)"
          },
          "receiverAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Address to receive the swapped tokens"
          }
        }
      },
      "BaseActionConfig": {
        "type": "object",
        "required": [
          "chainId"
        ],
        "properties": {
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "cost": {
            "$ref": "#/components/schemas/ActionPayment"
          }
        }
      },
      "EvmFunctionConfig": {
        "type": "object",
        "required": [
          "contractAddress",
          "signature",
          "args",
          "chainId"
        ],
        "properties": {
          "contractAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "signature": {
            "type": "string",
            "description": "Function signature"
          },
          "args": {
            "type": "array",
            "description": "Function arguments"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "cost": {
            "$ref": "#/components/schemas/ActionPayment"
          },
          "paymentOperator": {
            "$ref": "#/components/schemas/Address",
            "description": "Payment operator address"
          }
        }
      },
      "EvmCalldataTxConfig": {
        "type": "object",
        "required": [
          "contractAddress",
          "chainId",
          "value"
        ],
        "properties": {
          "contractAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Value to send with transaction as string with 'n' suffix (bigint serialized)"
          },
          "cost": {
            "$ref": "#/components/schemas/ActionPayment"
          },
          "data": {
            "$ref": "#/components/schemas/Hex",
            "description": "Calldata for the transaction"
          },
          "paymentOperator": {
            "$ref": "#/components/schemas/Address",
            "description": "The Erc20 spender requiring approval for the transaction call"
          }
        }
      },
      "EvmTransaction": {
        "type": "object",
        "required": [
          "to",
          "data",
          "value"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/EvmAddress"
          },
          "data": {
            "$ref": "#/components/schemas/Hex"
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Value in wei as string with 'n' suffix (bigint serialized)"
          },
          "gasPrice": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Gas price in wei as string with 'n' suffix (bigint serialized)"
          },
          "gasLimit": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Gas limit as string with 'n' suffix (bigint serialized)"
          },
          "maxFeePerGas": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Max fee per gas as string with 'n' suffix (bigint serialized)"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Max priority fee per gas as string with 'n' suffix (bigint serialized)"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          }
        }
      },
      "SerializedSolTransaction": {
        "type": "object",
        "required": [
          "base64Tx",
          "recentBlockhash",
          "payer"
        ],
        "properties": {
          "base64Tx": {
            "type": "string",
            "description": "Base64-encoded transaction"
          },
          "recentBlockhash": {
            "type": "string",
            "description": "Recent blockhash for transaction validity"
          },
          "payer": {
            "$ref": "#/components/schemas/SolanaAddress",
            "description": "PublicKey who pays fees"
          }
        }
      },
      "AltVmTransaction": {
        "type": "object",
        "required": [
          "to",
          "value",
          "chainId",
          "chainKey"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ExchangeAddress",
            "description": "Exchange address"
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Value as string with 'n' suffix (bigint serialized)"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "chainKey": {
            "type": "string",
            "description": "Chain key identifier"
          }
        }
      },
      "Payment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenInfo"
          },
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "pattern": "^[0-9]+n$",
                "description": "Amount as string with 'n' suffix (bigint serialized)"
              }
            }
          }
        ]
      },
      "ExchangeAddress": {
        "type": "string",
        "description": "Exchange address format"
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Token address"
          },
          "decimals": {
            "type": "integer",
            "description": "Token decimals"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol"
          },
          "name": {
            "type": "string",
            "description": "Token name"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId",
            "description": "Chain ID for the token"
          }
        }
      },
      "BridgeStep": {
        "type": "object",
        "required": [
          "srcChainId",
          "dstChainId",
          "srcBridgeToken",
          "dstBridgeToken",
          "bridgeId"
        ],
        "properties": {
          "srcChainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "dstChainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "srcBridgeToken": {
            "$ref": "#/components/schemas/Address"
          },
          "dstBridgeToken": {
            "$ref": "#/components/schemas/Address"
          },
          "bridgeId": {
            "$ref": "#/components/schemas/BridgeId"
          }
        }
      },
      "BridgeRoute": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BridgeStep"
        },
        "description": "Array of bridge steps"
      },
      "EvmAction": {
        "type": "object",
        "required": [
          "address",
          "signatures",
          "args",
          "functionName"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EvmAddress"
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "args": {
            "type": "array"
          },
          "functionName": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]+n$",
            "description": "Value in wei as string with 'n' suffix (bigint serialized)"
          }
        }
      },
      "Address": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{40}$",
        "description": "EVM address (20 bytes hex)"
      },
      "EvmAddress": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{40}$",
        "description": "EVM address (20 bytes hex)"
      },
      "SolanaAddress": {
        "type": "string",
        "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
        "description": "Solana public key (base58 encoded)"
      },
      "Hex": {
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]*$",
        "description": "Hex string with 0x prefix"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          }
        }
      },
      "TxRegistrationEvent": {
        "type": "object",
        "properties": {
          "transaction_hash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Transaction hash",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "chain_id": {
            "type": "integer",
            "description": "Chain ID where the transaction occurred",
            "example": 1
          }
        },
        "required": [
          "transaction_hash",
          "chain_id"
        ]
      },
      "ValidatedTxId": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the transaction registration was successful",
            "example": true
          },
          "error": {
            "type": "string",
            "description": "Error message if registration failed",
            "example": null
          }
        },
        "required": [
          "success"
        ]
      },
      "TxStatus": {
        "type": "object",
        "properties": {
          "statusMessage": {
            "type": "string",
            "enum": [
              "success",
              "pending",
              "refunded",
              "failed"
            ],
            "description": "Status of the transaction",
            "example": "success"
          },
          "sender": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "Sender wallet address",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "srcChainId": {
            "type": "integer",
            "description": "Source chain ID",
            "example": 1
          },
          "dstChainId": {
            "type": "integer",
            "description": "Destination chain ID",
            "example": 42161
          },
          "srcTxHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Source transaction hash",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "dstTxHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Destination transaction hash",
            "example": "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
          },
          "bridgeDetails": {
            "$ref": "#/components/schemas/BridgeDetails"
          },
          "txId": {
            "type": "string",
            "description": "Unique transaction identifier",
            "example": "tx_123456"
          }
        },
        "required": [
          "statusMessage",
          "sender",
          "srcChainId",
          "dstChainId",
          "srcTxHash",
          "dstTxHash",
          "bridgeDetails",
          "txId"
        ]
      },
      "TxDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TxStatus"
          },
          {
            "type": "object",
            "properties": {
              "org": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Org"
                  }
                ]
              },
              "decentScanLink": {
                "type": "string",
                "format": "uri",
                "description": "Link to Decent Scan for this transaction",
                "example": "https://decentscan.xyz?chainId=1&txHash=0x1234..."
              },
              "usdValue": {
                "type": "number",
                "nullable": true,
                "description": "USD value of the transaction",
                "example": 100.5
              },
              "srcTx": {
                "$ref": "#/components/schemas/OnchainTx"
              },
              "dstTx": {
                "$ref": "#/components/schemas/OnchainTx"
              }
            },
            "required": [
              "org",
              "decentScanLink",
              "usdValue",
              "srcTx",
              "dstTx"
            ]
          }
        ]
      },
      "BridgeDetails": {
        "type": "object",
        "properties": {
          "isBridge": {
            "type": "boolean",
            "description": "Whether this transaction involves bridging",
            "example": true
          },
          "bridgeTime": {
            "type": "number",
            "nullable": true,
            "description": "Bridge time in seconds (null if not a bridge)",
            "example": 420
          },
          "txPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxNode"
            },
            "description": "Transaction path through different chains"
          }
        },
        "required": [
          "isBridge",
          "bridgeTime",
          "txPath"
        ]
      },
      "TxNode": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "integer",
            "description": "Chain ID for this step",
            "example": 1
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Transaction hash for this step",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp as bigint string",
            "example": "1640995200000000000"
          },
          "nextBridge": {
            "type": "string",
            "description": "Bridge type for the next hop",
            "example": "optimism"
          }
        },
        "required": [
          "chainId",
          "txHash",
          "timestamp",
          "nextBridge"
        ]
      },
      "OnchainTx": {
        "type": "object",
        "properties": {
          "toAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Recipient address",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "Transaction hash",
            "example": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
          },
          "chainId": {
            "type": "integer",
            "description": "Chain ID",
            "example": 1
          },
          "blockExplorer": {
            "type": "string",
            "format": "uri",
            "description": "Block explorer URL",
            "example": "https://etherscan.io"
          },
          "gasProvided": {
            "type": "string",
            "description": "Gas provided as bigint string",
            "example": "21000n"
          },
          "gasUsed": {
            "type": "string",
            "description": "Gas used as bigint string",
            "example": "21000n"
          },
          "value": {
            "type": "string",
            "description": "Transaction value as bigint string",
            "example": "1000000000000000000n"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp as bigint string",
            "example": "1640995200000000000"
          },
          "blockNumber": {
            "type": "integer",
            "description": "Block number",
            "example": 16000000
          },
          "input": {
            "type": "string",
            "description": "Transaction input data",
            "example": "0x"
          },
          "revertReason": {
            "type": "string",
            "nullable": true,
            "description": "Revert reason if transaction failed",
            "example": null
          },
          "paymentToken": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "toAddress",
          "txHash",
          "chainId",
          "blockExplorer",
          "gasProvided",
          "gasUsed",
          "value",
          "timestamp",
          "blockNumber",
          "input",
          "revertReason",
          "paymentToken"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Token name",
            "example": "Ethereum"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol",
            "example": "ETH"
          },
          "decimals": {
            "type": "integer",
            "description": "Token decimals",
            "example": 18
          },
          "amount": {
            "type": "string",
            "description": "Token amount as bigint string",
            "example": "1000000000000000000n"
          },
          "address": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "Token contract address",
            "example": "0x1234567890123456789012345678901234567890"
          }
        },
        "required": [
          "name",
          "symbol",
          "decimals",
          "amount",
          "address"
        ]
      },
      "Org": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "nullable": true,
            "description": "Application ID",
            "example": "app_123"
          },
          "affiliateId": {
            "type": "string",
            "description": "Affiliate ID",
            "example": "affiliate_123"
          },
          "appFees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "description": "Fee recipient address"
                },
                "token": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "description": "Fee token address"
                },
                "amount": {
                  "type": "string",
                  "description": "Fee amount"
                }
              },
              "required": [
                "recipient",
                "token",
                "amount"
              ]
            }
          }
        },
        "required": [
          "appId",
          "affiliateId",
          "appFees"
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "Results per page",
            "example": 25
          },
          "total": {
            "type": "integer",
            "description": "Total number of results",
            "example": 150
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "example": 6
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "totalPages"
        ]
      },
      "get_400__api_getStatusSchema": {
        "$ref": "#/components/schemas/ErrorResponse"
      },
      "post_200__webhooks_registerTxsSchema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ValidatedTxId"
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "Limited demo key for API Playground: `e2c440ee9c0cf66bb58ede58ac0eb7f1`."
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Unauthorized - API key required"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}